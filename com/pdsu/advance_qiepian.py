#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']
# 取前3个元素，应该怎么做？
print  [L[0], L[1], L[2]]
# 对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python提供了切片（Slice）操作符，能大大简化这种操作。
r = []
n = 3
for i in range(n):
    r.append(L[i])
    print r
# 对应上面的问题，取前3个元素，用一行代码就可以完成切片：
print L[0:3]
# L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。
#
# 如果第一个索引是0，还可以省略：
print L[:3]
# 也可以从索引1开始，取出2个元素出来：
print L[1:3]
# 类似的，既然Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片，试试：
print '>>>>>>>>>>>>>>>>>>>>>'
print L[-2:]
print L[-5:-1]
print L[:]
print L[-1]
# 记住倒数第一个元素的索引是-1
# 切片操作十分有用。我们先创建一个0-99的数列：
L1=range(100)
print L1
# 可以通过切片轻松取出某一段数列。比如前10个数：
print L1[:10]
# 后十位
print L1[-10:]
# 前十位
print L1[:-90]
# 前11-20个数
print L1[10:20]
# 前10个数，每两个取一个：
print L1[:10:2]
# 所有数，每5个取一个：
print L1[::5]

# tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple：
print (0, 1, 2, 3, 4, 5)[:3]
# (0, 1, 2)
# 字符串'xxx'或Unicode字符串u'xxx'也可以看成是一种list，每个元素就是一个字符。
# 因此，字符串也可以用切片操作，只是操作结果仍是字符串：
# >>> 'ABCDEFG'[:3]
# 'ABC'
# >>> 'ABCDEFG'[::2]
# 'ACEG'

# 在很多编程语言中，针对字符串提供了很多各种截取函数，其实目的就是对字符串切片。
# Python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。


# 小结
#
# 有了切片操作，很多地方循环就不再需要了。Python的切片非常灵活，一行代码就可以实现很多行循环才能完成的操作。


'''
C:\Python27\python.exe D:/PycharmProjects/py_pro/com/pdsu/advance_qiepian.py
['Michael', 'Sarah', 'Tracy']
['Michael']
['Michael', 'Sarah']
['Michael', 'Sarah', 'Tracy']
['Michael', 'Sarah', 'Tracy']
['Michael', 'Sarah', 'Tracy']
['Sarah', 'Tracy']
>>>>>>>>>>>>>>>>>>>>>
['Bob', 'Jack']
['Michael', 'Sarah', 'Tracy', 'Bob']
['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']
Jack
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
[0, 2, 4, 6, 8]
[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]
(0, 1, 2)

'''